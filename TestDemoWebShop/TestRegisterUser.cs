using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using System.Drawing.Imaging;
using System.Reflection;
using OpenQA.Selenium.DevTools.V121.Network;  // Add this using directive

/*
// The source code was generated by cSharpSeleniumGenerator.js
// Copyright: Tricentis
// Website: https://www.tricentis.com
// C# plugin version: 1.3.4
*/
namespace tricentis.qtest.demowebshop.test
{
    [TestClass]
    public class TestRegisterUser
    {
        private IWebDriver _driver;
        private const int MOUSE_LEFT = 0;
        private const int MOUSE_RIGHT = 2;
        private const bool alwaysExecuteActionInLatestWindow = true;

        public TestContext? TestContext { get; set; }  // Declare TestContext as nullable

        [TestInitialize]
        public void TestInit()
        {
            _driver = new ChromeDriver();
            _driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);
            _driver.Manage().Window.Maximize();
            _driver.Navigate().GoToUrl("https://demowebshop.tricentis.com/login");
        }

        [TestMethod]
        public void TestRegisterNewUserScenario()
        {
            var homePage = new HomePage(_driver); 
            var registerPage = new RegisterPage(_driver);

            // Generate random user details
            var random = new Random();
            var firstName = $"User{random.Next(1000, 9999)}";
            var lastName = $"One{random.Next(1000, 9999)}";
            var email = $"{firstName}@example.com";
            var password = "Password123";

            homePage.ClickRegisterLink();
            registerPage.SelectGender("male");
            registerPage.EnterFirstName(firstName);
            registerPage.EnterLastName(lastName);
            registerPage.EnterEmail(email);
            registerPage.EnterPassword(password);
            registerPage.ConfirmPassword(password);
            registerPage.ClickRegisterButton();
            registerPage.ClickContinueButton();
        }

        [TestMethod]
        public void TestRegisterExistingUserScenario()
        {
            var homePage = new HomePage(_driver); 
            var registerPage = new RegisterPage(_driver);

            homePage.ClickRegisterLink();
            registerPage.SelectGender("male");
            registerPage.EnterFirstName("User");
            registerPage.EnterLastName("One");
            registerPage.EnterEmail("UserOne@UserOne.com");
            registerPage.EnterPassword("UserOne");
            registerPage.ConfirmPassword("UserOne");
            registerPage.ClickRegisterButton();
            Assert.IsTrue(registerPage.IsErrorMessageDisplayed("The specified email already exists"), "Error message not displayed, meaning this user is not existing in the system.");
        }

        [TestCleanup]
        public void TestCleanup()
        {
            string filePath = "";
            try
            {
                // Capture screenshot
                var screenshot = ((ITakesScreenshot)_driver).GetScreenshot();

                // Define the screenshot file path
                string fileNameBase = $"{TestContext!.TestName}_{DateTime.Now:yyyyMMddHHmmss}";
                string directoryPath = $"{Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)}\\Screenshots";
                Directory.CreateDirectory(directoryPath);  // Create directory if it doesn't exist
                filePath = $"{directoryPath}\\{fileNameBase}.jpeg";

                // Save the screenshot
                screenshot.SaveAsFile(filePath);
                TestContext.WriteLine(filePath);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to capture screenshot: {ex.Message}");
            }
            finally
            {
                 Console.WriteLine($"Screenshot saved at: {filePath}");
                _driver.Close();
                _driver.Quit();
            }
        }
    }
}
